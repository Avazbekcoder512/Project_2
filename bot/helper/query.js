const { bot } = require("../bot");
const User = require("../../model/user.model");

bot.on("callback_query", async (query) => {
  const { data } = query;
  const chatId = query.from.id;
  const user = await User.findOne({ chatId: chatId }).lean();

  if (!user.language) {
    if (data === "O'zbek tili") {
      await User.findByIdAndUpdate(
        user._id,
        {
          ...user,
          language: "O'zb",
        },
        { new: true }
      );
      bot.sendMessage(
        chatId,
        "Assalomu alaykum üëã. Botimizga xush kelibsuz ü§ù. Iltimos telefon raqamingizni yuboring",
        {
          reply_markup: {
            keyboard: [
              [
                {
                  text: "üì± Telefon raqamni yuborish",
                  request_contact: true,
                },
              ],
            ],
            resize_keyboard: true,
          },
        }
      );
    }

    if (data === "Rus tili") {
      await User.findByIdAndUpdate(
        user._id,
        {
          ...user,
          language: "Rus",
        },
        { new: true }
      );
      bot.sendMessage(
        chatId,
        "–ü—Ä–∏–≤–µ—Ç üëã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç ü§ù. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        {
          reply_markup: {
            keyboard: [
              [
                {
                  text: "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                  request_contact: true,
                },
              ],
            ],
            resize_keyboard: true,
          },
        }
      );
    }

    if (data === "Ingliz tili") {
      await User.findByIdAndUpdate(
        user._id,
        {
          ...user,
          language: "Eng",
        },
        { new: true }
      );
      bot.sendMessage(
        chatId,
        "Hello üëã. Welcome to our bot ü§ù. Please send your phone number",
        {
          reply_markup: {
            keyboard: [
              [
                {
                  text: "üì± Send phone number",
                  request_contact: true,
                },
              ],
            ],
            resize_keyboard: true,
          },
        }
      );
    }
  } else if (user.language) {
    if (data === "O'zbek tili") {
      await User.findByIdAndUpdate(
        user._id,
        {
          ...user,
          language: "O'zb",
        },
        { new: true }
      );
      bot.sendMessage(
        chatId,
        "Assalomu alaykum üëã. Botimizga xush kelibsuz ü§ù. Botdan to'liq foydalanish uchun Menyuni bosing",
        {
          reply_markup: {
            keyboard: [[{ text: "Menyu" }]],
            resize_keyboard: true,
          },
        }
      );
    }

    if (data === "Rus tili") {
      await User.findByIdAndUpdate(
        user._id,
        {
          ...user,
          language: "Rus",
        },
        { new: true }
      );
      bot.sendMessage(
        chatId,
        "–ü—Ä–∏–≤–µ—Ç üëã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç ü§ù. –ù–∞–∂–º–∏—Ç–µ ¬´–ú–µ–Ω—é¬ª, —á—Ç–æ–±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
        {
          reply_markup: {
            keyboard: [[{ text: "–ú–µ–Ω—é" }]],
            resize_keyboard: true,
          },
        }
      );
    }

    if (data === "Ingliz tili") {
      await User.findByIdAndUpdate(
        user._id,
        {
          ...user,
          language: "Eng",
        },
        { new: true }
      );
      bot.sendMessage(
        chatId,
        "Hello üëã. Welcome to our bot ü§ù. Click the Menu button to fully utilize the bot",
        {
          reply_markup: {
            keyboard: [[{ text: "Menu" }]],
            resize_keyboard: true,
          },
        }
      );
    }
  }
});